// <auto-generated />
using System;
using DentalClinicApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Кожетьева_WPF.Migrations
{
    [DbContext(typeof(DentalClinicContext))]
    partial class DentalClinicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("DentalClinicApp.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("DentistID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DentistID");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DurationMinutes");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PatientID");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Purpose");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("ScheduledDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Scheduled")
                        .HasColumnName("Status");

                    b.HasKey("AppointmentID")
                        .HasName("PK_Appointment");

                    b.HasIndex("DentistID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("DentalClinicApp.Models.DentalService", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("BasePrice");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DurationMinutes");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceName");

                    b.HasKey("ServiceID")
                        .HasName("PK_DentalService");

                    b.ToTable("DentalService", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            BasePrice = 1500m,
                            Category = "Диагностика",
                            Description = "Первичная консультация стоматолога",
                            DurationMinutes = 30,
                            ServiceName = "Консультация"
                        },
                        new
                        {
                            ServiceID = 2,
                            BasePrice = 4500m,
                            Category = "Терапия",
                            Description = "Пломбирование одного кариозного зуба",
                            DurationMinutes = 60,
                            ServiceName = "Лечение кариеса"
                        });
                });

            modelBuilder.Entity("DentalClinicApp.Models.Dentist", b =>
                {
                    b.Property<int>("DentistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("HireDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("LicenseNumber");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("MiddleName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("Phone");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Specialization");

                    b.HasKey("DentistID")
                        .HasName("PK_Dentist");

                    b.ToTable("Dentist", (string)null);

                    b.HasData(
                        new
                        {
                            DentistID = 1,
                            Email = "ivan.petrov@clinic.com",
                            FirstName = "Иван",
                            HireDate = new DateTime(2020, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Петров",
                            LicenseNumber = "ST-12345",
                            MiddleName = "Иванович",
                            Phone = "+71234567890",
                            Specialization = "Терапевт"
                        });
                });

            modelBuilder.Entity("DentalClinicApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("BirthDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MedicalHistory");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("MiddleName");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("Phone");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("RegistrationDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("PatientID")
                        .HasName("PK_Patient");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("DentalClinicApp.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("PaymentDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("PaymentMethod");

                    b.Property<int>("RecordID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RecordID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending")
                        .HasColumnName("Status");

                    b.HasKey("PaymentID")
                        .HasName("PK_Payment");

                    b.HasIndex("RecordID");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("DentalClinicApp.Models.ServiceRecord", b =>
                {
                    b.Property<int>("RecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<decimal>("ActualPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ActualPrice");

                    b.Property<int>("DentistID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DentistID");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notes");

                    b.Property<int>("PatientID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PatientID");

                    b.Property<DateTime>("ServiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceDate")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Completed")
                        .HasColumnName("Status");

                    b.HasKey("RecordID")
                        .HasName("PK_ServiceRecord");

                    b.HasIndex("DentistID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceRecord", (string)null);
                });

            modelBuilder.Entity("DentalClinicApp.Models.Appointment", b =>
                {
                    b.HasOne("DentalClinicApp.Models.Dentist", "Dentist")
                        .WithMany("Appointments")
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DentalClinicApp.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalClinicApp.Models.Payment", b =>
                {
                    b.HasOne("DentalClinicApp.Models.ServiceRecord", "ServiceRecord")
                        .WithMany("Payments")
                        .HasForeignKey("RecordID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceRecord");
                });

            modelBuilder.Entity("DentalClinicApp.Models.ServiceRecord", b =>
                {
                    b.HasOne("DentalClinicApp.Models.Dentist", "Dentist")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("DentistID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DentalClinicApp.Models.Patient", "Patient")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DentalClinicApp.Models.DentalService", "DentalService")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DentalService");

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalClinicApp.Models.DentalService", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("DentalClinicApp.Models.Dentist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("DentalClinicApp.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("DentalClinicApp.Models.ServiceRecord", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
